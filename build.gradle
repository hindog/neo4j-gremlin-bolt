plugins {
    id 'net.ltgt.apt' version '0.15'
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'com.jfrog.bintray' version '1.8.4'
}

group = 'ta.nemahuta.neo4j'

description = "Tanemahuta's Neo4J Gremlin (Bolt) integration"

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'

}

repositories {
    jcenter()
}

sourceSets {
    integTest {
        java.srcDir file('src/integTest/java')
        resources.srcDir file('src/integTest/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

dependencies {
    final lombokVersion = "1.18.22"
    final mockitoVersion = "2.28.2"
    final junitVersion = "5.5.0"
    final ehCacheVersion = "3.7.1"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    compile(group: 'org.apache.tinkerpop', name: 'gremlin-core', version: '3.4.2') {
        exclude(group: "org.slf4j", module: 'slf4j-log4j12')
    }

    compile group: 'javax.cache', name: 'cache-api', version: '1.1.0'
    compile group: 'org.neo4j.driver', name: 'neo4j-java-driver', version: '4.4.2'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.26'
    compile group: 'com.google.guava', name: 'guava', version: '28.0-jre'
    compile group: 'org.neo4j', name: 'neo4j-cypher-dsl', version: '2022.0.0'
    compile group: 'org.neo4j', name: 'neo4j-cypher-dsl-parser', version: '2022.0.0'
    compile group: 'org.jetbrains', name: 'annotations', version: '23.0.0'

    ["junit-jupiter-api", "junit-jupiter-params"].each {
        testCompile "org.junit.jupiter:${it}:${junitVersion}"
    }
    testCompile 'ch.qos.logback:logback-classic:1.2.3'

    ["mockito-core", "mockito-junit-jupiter"].each {
        testCompile "org.mockito:${it}:${mockitoVersion}"
    }
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    testRuntime 'org.junit.platform:junit-platform-launcher:1.2.0'

    testRuntime group: 'org.ehcache', name: 'ehcache', version: ehCacheVersion

    integTestCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '2.1'
    integTestCompile group: 'org.xmlunit', name: 'xmlunit-matchers', version: '2.6.3'
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integTest.output.classesDirs
    classpath = sourceSets.integTest.runtimeClasspath

    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }

    mustRunAfter test
}

jacocoTestReport.dependsOn integrationTest
check.dependsOn integrationTest

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }
}

jacoco {
    toolVersion = '0.8.4'
}

test.jacoco.excludes['ta.nemahuta.neo4j.features.*']

jacocoTestReport {
    dependsOn test, integrationTest
    executionData = files(test.jacoco.destinationFile, integrationTest.jacoco.destinationFile)
    reports {
        xml.enabled = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['ModuleJar']
    pkg {
        repo = 'neo4j'
        name = 'neo4j-gremlin-bolt'
        userOrg = 'tanemahuta'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/Tanemahuta/neo4j-gremlin-bolt.git'
        issueTrackerUrl = "https://github.com/Tanemahuta/neo4j-gremlin-bolt/issues"
        websiteUrl = "https://github.com/Tanemahuta/neo4j-gremlin-bolt"
        githubRepo = 'Tanemahuta/neo4j-gremlin-bolt'
        githubReleaseNotesFile = 'README.md'
        version {
            name = project.version as String
            released = new Date()
            vcsTag = name
        }
    }
    publish = true
}

tasks.bintrayUpload.onlyIf { !(project.version as String).endsWith("-SNAPSHOT") }

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath

    options {
        setMemberLevel JavadocMemberLevel.PUBLIC
        setAuthor true

        links "https://docs.oracle.com/javase/8/docs/api/"
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
    dependsOn javadoc
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        ModuleJar(MavenPublication) {
            from components.java
            groupId project.group
            artifactId project.name
            version project.version as String

            artifact sourcesJar
            artifact javadocJar
        }
    }
}
